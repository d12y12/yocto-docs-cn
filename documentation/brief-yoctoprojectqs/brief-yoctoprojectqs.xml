<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"../template/4.2/docbook-xml-4.2/docbookx.dtd"
[<!ENTITY % poky SYSTEM "../poky.ent"> %poky; ] >

<article id='brief-yocto-project-qs-intro'>
    <articleinfo>
        <title>Yocto项目快速构建</title>

        <copyright>
            <year>&COPYRIGHT_YEAR;</year>
            <holder>Linux Foundation</holder>
        </copyright>

        <legalnotice>
            <para>
                Permission is granted to copy, distribute and/or modify this document under
                the terms of the <ulink type="http" url="http://creativecommons.org/licenses/by-sa/2.0/uk/">Creative Commons Attribution-Share Alike 2.0 UK: England &amp; Wales</ulink> as published by Creative Commons.
            </para>
        </legalnotice>


        <abstract>
            <imagedata fileref="figures/yocto-project-transp.png"
                        width="6in" depth="1in"
                        align="right" scale="25" />
        </abstract>
    </articleinfo>

    <section id='brief-welcome'>
        <title>欢迎!</title>

        <para>
            欢迎!
            这篇简短的文档将引导您使用Yocto项目进行一次典型的映像构建过程。
            同时，本文还介绍了如何为特定硬件配置构建。
            您将使用Yocto项目构建一个名为Poky的参考嵌入式操作系统。
            <note><title>注意</title>
                <itemizedlist>
                    <listitem><para>
                        本文中的示例假设您使用的机器运行原生Linux系统如最新的Ubuntu发行版。
                        如果您使用构建Yocto项目映像的机器
                        (<ulink url='&YOCTO_DOCS_REF_URL;#hardware-build-system-term'>构建主机</ulink>)
                        不是原生Linux系统, 您可以使用CROss PlatformS
                        (CROPS) 并配置一个Poky容器来执行这些步骤。
                        了解更多信息，请参阅“Yocto项目开发任务手册”的
                        "<ulink url='&YOCTO_DOCS_DEV_URL;#setting-up-to-use-crops'>设置 CROss PlatformS (CROPS)</ulink>"
                        部分。
                        </para></listitem>
                    <listitem><para>
                        您可以使用 Windows Subsystem For Linux v2在Windows 10系统上设置一个构建主机。
                        <note><title>注意</title>
                          Yocto项目与WSLv1不兼容，与WSLv2兼容但并非官方支持或者验证过，如果您决定使用WSL，
                          请升级到WSLv2。
                        </note>
                        了解更多信息，请参阅“Yocto项目开发任务手册”的
                        "<ulink url='&YOCTO_DOCS_DEV_URL;#setting-up-to-use-wsl'>设置 Windows Subsystem For Linux</ulink>"
                        部分。
                        </para></listitem>
                </itemizedlist>
            </note>
        </para>

        <para>
            如果您想了解有关Yocto项目的更多概念或背景信息，请参阅
            <ulink url='&YOCTO_DOCS_OM_URL;'>Yocto项目概述和概念手册</ulink>.
        </para>
    </section>

    <section id='brief-compatible-distro'>
        <title>兼容的Linux发行版</title>

        <para>
            确认您的
            <ulink url='&YOCTO_DOCS_REF_URL;#hardware-build-system-term'>构建主机</ulink>
            符合下列要求:
            <itemizedlist>
                <listitem><para>
                    50 Gbytes 的磁盘可用空间
                    </para></listitem>
                <listitem><para>
                    运行受支持的Linux发行版(如Fedora, openSUSE, CentOS, Debian, 或Ubuntu的最新版本)。
                    有关支持Yocto项目的Linux发行版列表，请参阅“Yocto项目参考手册”的
                    "<ulink url='&YOCTO_DOCS_REF_URL;#detailed-supported-distros'>受支持的Linux发行版</ulink>"
                    部分。
                    有关准备构建主机的详细信息，请参阅“Yocto项目开发任务手册”的
                    "<ulink url='&YOCTO_DOCS_DEV_URL;#dev-preparing-the-build-host'>准备构建主机</ulink>"
                    部分。
                    </para></listitem>
                <listitem><para>
                    <itemizedlist>
                        <listitem><para>
                            Git 1.8.3.1 或更高版本
                            </para></listitem>
                        <listitem><para>
                            tar 1.28 或更高版本
                            </para></listitem>
                        <listitem><para>
                            Python 3.5.0 或更高版本
                        </para></listitem>
                        <listitem><para>
                            gcc 5.0 或更高版本
                        </para></listitem>
                    </itemizedlist>
                    如果构建主机不满足这三个列出的版本要求中的任何一个，
                    您需要做一些准备工作来满足Yocto项目使用要求，
                    请参阅“Yocto项目参考手册”的
                    "<ulink url='&YOCTO_DOCS_REF_URL;#required-git-tar-python-and-gcc-versions'>Git, tar, Python和gcc的版本需求</ulink>"
                    部分。
                    </para></listitem>
            </itemizedlist>
        </para>
    </section>

    <section id='brief-build-system-packages'>
        <title>构建主机软件包</title>

        <para>
            您必须在构建主机上安装必要的主机软件包。
            以下命令安装基于Ubuntu发行版主机软件包：
            <note><title>注意</title>
                更多关于受支持的Linux发行版软件包信息，请参阅“Yocto项目参考手册”的
                "<ulink url='&YOCTO_DOCS_REF_URL;#required-packages-for-the-build-host'>构建主机软件包需求</ulink>"
                部分。
            </note>
            <literallayout class='monospaced'>
     $ sudo apt-get install &UBUNTU_HOST_PACKAGES_ESSENTIAL;
            </literallayout>
        </para>
    </section>

    <section id='brief-use-git-to-clone-poky'>
        <title>使用Git克隆Poky</title>

        <para>
            完成构建主机的设置后，需要在构建主机上获取Poky库的副本。
            使用以下命令克隆Poky库。
            <literallayout class='monospaced'>
     $ git clone git://git.yoctoproject.org/poky
     Cloning into 'poky'...
     remote: Counting objects: 432160, done.
     remote: Compressing objects: 100% (102056/102056), done.
     remote: Total 432160 (delta 323116), reused 432037 (delta 323000)
     Receiving objects: 100% (432160/432160), 153.81 MiB | 8.54 MiB/s, done.
     Resolving deltas: 100% (323116/323116), done.
     Checking connectivity... done.
            </literallayout>
            移动到 <filename>poky</filename> 目录并查看标签:
            <literallayout class='monospaced'>
     $ cd poky
     $ git fetch --tags
     $ git tag
     1.1_M1.final
     1.1_M1.rc1
     1.1_M1.rc2
     1.1_M2.final
     1.1_M2.rc1
        .
        .
        .
     yocto-2.5
     yocto-2.5.1
     yocto-2.5.2
     yocto-2.6
     yocto-2.6.1
     yocto-2.6.2
     yocto-2.7
     yocto_1.5_M5.rc8
            </literallayout>
            对于本示例, 检出基于
            &DISTRO_REL_TAG; 版本的分支:
            <literallayout class='monospaced'>
     $ git checkout tags/&DISTRO_REL_TAG; -b my-&DISTRO_REL_TAG;
     Switched to a new branch 'my-&DISTRO_REL_TAG;'
            </literallayout>
            刚刚的 Git checkout 命令创建一个名为
            my-&DISTRO_REL_TAG; 的本地分支。 该分支的文件与仓库中
            "&DISTRO_NAME_NO_CAP;" 开发分支发布
            Yocto项目 &DISTRO_REL_TAG; 时的文件完全一致。
        </para>

        <para>
            有关如何访问Yocto项目相关库的更多选项和信息，请参阅“Yocto项目开发任务手册”的
            "<ulink url='&YOCTO_DOCS_DEV_URL;#locating-yocto-project-source-files'>查找Yocto项目源文件</ulink>"
            部分。
        </para>
    </section>

    <section id='brief-building-your-image'>
        <title>构建您的镜像</title>

        <para>
            使用下面的步骤构建您的镜像。
            构建过程从源代码开始创建一个完整的Linux发行版，包含工具链。
            <note><title>注意</title>
                <itemizedlist>
                    <listitem><para>
                        如果您工作在防火墙后并且没有为构建主机设置代理，
                        在构建过程中可能会遇到获取源代码的问题（例如，获取器（fetcher）失败或者Git失败）。
                        </para></listitem>
                    <listitem><para>
                        如果您不知道代理设置，请咨询提供本地网络架构的服务人员并获取该信息。
                        另一个不错的方法是查看您的Web浏览器的设置。
                        最后，您可以在Yocto项目的Wiki页面
                        "<ulink url='https://wiki.yoctoproject.org/wiki/Working_Behind_a_Network_Proxy'>Working Behind a Network Proxy</ulink>"
                        上找到更多信息。
                        </para></listitem>
                </itemizedlist>
            </note>
        </para>

        <para>
            <orderedlist>
                <listitem><para>
                    <emphasis>初始化构建环境:</emphasis>
                    在 <filename>poky</filename> 目录中，运行
                    <ulink url='&YOCTO_DOCS_REF_URL;#structure-core-script'><filename>&OE_INIT_FILE;</filename></ulink>
                    环境设置脚本来定义您构建主机上的Yocto项目构建环境。
                    <literallayout class='monospaced'>
     $ cd ~/poky
     $ source &OE_INIT_FILE;
     You had no conf/local.conf file. This configuration file has therefore been
     created for you with some default values. You may wish to edit it to, for
     example, select a different MACHINE (target hardware). See conf/local.conf
     for more information as common configuration options are commented.

     You had no conf/bblayers.conf file. This configuration file has therefore been
     created for you with some default values. To add additional metadata layers
     into your configuration please add entries to conf/bblayers.conf.

     The Yocto Project has extensive documentation about OE including a reference
     manual which can be found at:
         http://yoctoproject.org/documentation

     For more information about OpenEmbedded see their website:
         http://www.openembedded.org/


     ### Shell environment set up for builds. ###

     You can now run 'bitbake &lt;target&gt;'

     Common targets are:
         core-image-minimal
         core-image-sato
         meta-toolchain
         meta-ide-support

     You can also run generated qemu images with a command like 'runqemu qemux86-64'
                    </literallayout>
                    除此之外，该脚本会创建一个
                    <ulink url='&YOCTO_DOCS_REF_URL;#build-directory'>构建目录</ulink>,
                    在本例中构建目录名为 <filename>build</filename> 位于
                    <ulink url='&YOCTO_DOCS_REF_URL;#source-directory'>源文件目录</ulink>。
                    脚本执行后，您的当前工作目录将变为构建目录。
                    随后，当构建完成，构建目录会包含构建过程中产生的所有文件。
                    </para></listitem>
                <listitem><para id='conf-file-step'>
                    <emphasis>检查您的本地配置文件:</emphasis>
                    当您设置构建环境时，将在构建目录中的 <filename>conf</filename> 
                    文件夹创建一个名为
                    <filename>local.conf</filename> 的本地配置文件。
                    在本例中，默认值被设置为构建一个仿真目标
                    <filename>qemux86</filename> 。
                    包管理器被设置为 RPM 包管理器。
                    <tip><title>提示</title>
                        通过使用镜像（mirrors），您可以显著加速构建并防止获取器失败。
                        要使用镜像，请将这些行添加到您的
                        <filename>local.conf</filename> 文件中:
                        <literallayout class='monospaced'>
     SSTATE_MIRRORS = "\
     file://.* http://sstate.yoctoproject.org/dev/PATH;downloadfilename=PATH \n \
     file://.* http://sstate.yoctoproject.org/&YOCTO_DOC_VERSION_MINUS_ONE;/PATH;downloadfilename=PATH \n \
     file://.* http://sstate.yoctoproject.org/&YOCTO_DOC_VERSION;/PATH;downloadfilename=PATH \n \
     "
                        </literallayout>
                        上面的例子展示如何将 sstate 路径添加到
                        Yocto项目 &YOCTO_DOC_VERSION_MINUS_ONE;,
                        &YOCTO_DOC_VERSION;, 及一个开发分支。
                        有关sstate位置的完整索引，请参阅
                        <ulink url='http://sstate.yoctoproject.org/'></ulink>.
                    </tip>
                    </para></listitem>
                <listitem><para>
                    <emphasis>启动构建:</emphasis>
                    继续使用以下命令为目标构建操作系统镜像，本例中目标为
                    <filename>core-image-sato</filename> :
                    <literallayout class='monospaced'>
     $ bitbake core-image-sato
                    </literallayout>
                    有关使用
                    <filename>bitbake</filename> 命令的信息, 请参阅“Yocto项目概述和概念手册”的
                    "<ulink url='&YOCTO_DOCS_OM_URL;#usingpoky-components-bitbake'>BitBake</ulink>"
                    部分,
                    或者参阅“BitBake用户手册”的
                    "<ulink url='&YOCTO_DOCS_BB_URL;#bitbake-user-manual-command'>BitBake命令</ulink>"
                    部分。
                    </para></listitem>
                <listitem><para>
                    <emphasis>使用QEMU仿真您的镜像:</emphasis>
                    当这个镜像构建完成后，您可以启动QEMU，它是Yocto项目附带的快速仿真器（Quick EMUlator）:
                    <literallayout class='monospaced'>
     $ runqemu qemux86-64
                    </literallayout>
                    如果您想了解有关运行QEMU的更多信息，请参阅“Yocto项目开发任务手册”的
                    "<ulink url="&YOCTO_DOCS_DEV_URL;#dev-manual-qemu">使用快速仿真器(QEMU)</ulink>"
                    部分。
                    </para></listitem>
                <listitem><para>
                    <emphasis>退出QEMU:</emphasis>
                    通过点击关闭图标或者在正在运行的QEMU窗口键入 <filename>Ctrl-C</filename> 来退出QEMU。
                    </para></listitem>
            </orderedlist>
        </para>
    </section>

    <section id='customizing-your-build-for-specific-hardware'>
        <title>为特定硬件定制您的构建</title>

        <para>
            到目前为止，您已经快速构建了一个适用于仿真的镜像。
            本章会向您展示如何在Yocto项目开发环境中添加硬件层, 借此实现为特定硬件定制您的构建。
        </para>

        <para>
            通常，层是包含相关指令集和配置的库，这些指令和配置告诉Yocto项目要执行的操作。
            将相关元数据隔离到按功能区分的特定层中，有助于模块化开发，并且使层的元数据更容易重用。
            <note><title>注意</title>
                按照惯例，层的名字以字符串 "meta-" 开头。
            </note>
        </para>

        <para>
            按照以下步骤添加一个硬件层:
            <orderedlist>
                <listitem><para>
                    <emphasis>查找一个层:</emphasis>
                    存在大量硬件层。
                    Yocto项目
                    <ulink url='&YOCTO_GIT_URL;'>源存储库</ulink>
                    中有许多硬件层。
                    本例添加
                    <ulink url='https://github.com/kraj/meta-altera'>meta-altera</ulink>
                    硬件层。
                    </para></listitem>
                <listitem><para>
                    <emphasis>克隆层</emphasis>
                    使用Git在您的机器上创建层的本地副本。您可以将副本放在先前创建的Poky库副本的顶层目录 :
                    <literallayout class='monospaced'>
     $ cd ~/poky
     $ git clone https://github.com/kraj/meta-altera.git
     Cloning into 'meta-altera'...
     remote: Counting objects: 25170, done.
     remote: Compressing objects: 100% (350/350), done.
     remote: Total 25170 (delta 645), reused 719 (delta 538), pack-reused 24219
     Receiving objects: 100% (25170/25170), 41.02 MiB | 1.64 MiB/s, done.
     Resolving deltas: 100% (13385/13385), done.
     Checking connectivity... done.
                    </literallayout>
                    现在 <filename>meta-altera</filename> 硬件层与构建主机上的Poky参考库内的
                    其他层都存储在您的本地，这个硬件层包含支持硬件的所有元数据。此硬件层由Altera提供，
                    Altera属于Intel。
                    </para></listitem>
                <listitem><para>
                    <emphasis>为构建特定设备更改设置:</emphasis>
                    <filename>local.conf</filename> 文件中的
                    <ulink url='&YOCTO_DOCS_REF_URL;#var-MACHINE'><filename>MACHINE</filename></ulink>
                    变量指定了构建设备。
                    在本例中, 将 <filename>MACHINE</filename> 变量设置为 "cyclone5"。
                    使用如下配置:
                    <ulink url='https://github.com/kraj/meta-altera/blob/master/conf/machine/cyclone5.conf'></ulink>.
                    <note><title>注意</title>
                        有关构建配置的更多信息，请参阅前面的
                        "<link linkend='conf-file-step'>检查本地配置文件</link>"。
                    </note>
                    </para></listitem>
                <listitem><para>
                    <emphasis>添加您的层到层配置文件:</emphasis>
                    在您的构建过程能够使用一个层之前，您必须把层添加到
                     <filename>bblayers.conf</filename> 文件, 该文件位于
                    <ulink url='&YOCTO_DOCS_REF_URL;#build-directory'>构建目录下的</ulink>
                    <filename>conf</filename> 子目录。</para>

                    <para>使用 <filename>bitbake-layers add-layer</filename>
                    命令将层添加到配置文件中:
                    <literallayout class='monospaced'>
     $ cd ~/poky/build
     $ bitbake-layers add-layer ../meta-altera
     NOTE: Starting bitbake server...
     Parsing recipes: 100% |##################################################################| Time: 0:00:32
     Parsing of 918 .bb files complete (0 cached, 918 parsed). 1401 targets, 123 skipped, 0 masked, 0 errors.
                    </literallayout>
                    有关添加层的更多信息，请参阅
                    "<ulink url='&YOCTO_DOCS_DEV_URL;#adding-a-layer-using-the-bitbake-layers-script'>使用 <filename>bitbake-layers</filename> 脚本添加层</ulink>"。
                    </para></listitem>
            </orderedlist>
            完成这些步骤后，
            <filename>meta-altera</filename> 层被添加到Yocto项目开发环境中，同时构建目标被配置成"cyclone5"设备。
            <note><title>注意</title>
                前面的步骤仅用于演示目的。 如果您尝试为 "cyclone5" 构建镜像，您需要阅读
                Altera <filename>README</filename>。  
            </note>
        </para>
    </section>

    <section id='creating-your-own-general-layer'>
        <title>创建您自己的通用层</title>

        <para>
            也许您需要隔离一个应用程序或一组特定的行为。 
            您可以使用
            <filename>bitbake-layers create-layer</filename> 命令来创建一个通用层。
            该工具是一个层创建的自动化工具，会创建一个子目录包含一个 
            <filename>layer.conf</filename> 配置文件，
            一个 <filename>recipes-example</filename> 子目录包含一个 
            <filename>example.bb</filename> 菜谱, 一个许可文件及一个 <filename>README</filename>.
        </para>

        <para>
            以下命令运行该工具以在 <filename>poky</filename> 目录下创建
            <filename>meta-mylayer</filename> 层:
            <literallayout class='monospaced'>
     $ cd ~/poky
     $ bitbake-layers create-layer meta-mylayer
     NOTE: Starting bitbake server...
     Add your new layer with 'bitbake-layers add-layer meta-mylayer'
            </literallayout>
            有关层及其创建方法的更多信息，请参阅“Yocto项目开发任务手册”的
            "<ulink url='&YOCTO_DOCS_DEV_URL;#creating-a-general-layer-using-the-bitbake-layers-script'>使用 <filename>bitbake-layers</filename> 脚本创建通用层</ulink>"
            部分。
        </para>
    </section>

    <section id='brief-where-to-go-next'>
        <title>更进一步</title>

        <para>
            您在这里体验过Yocto项目后，您可能会问自己“然后呢？”。
            Yocto项目有许多信息来源，包括网站，维基页面和用户手册：
            <itemizedlist>
                <listitem><para>
                    <emphasis>网站:</emphasis>
                    <ulink url='&YOCTO_HOME_URL;'>Yocto项目网站</ulink>
                    提供背景信息，最新版本，突发新闻，完整的开发文档，及Yocto项目开发社区入口。
                    </para></listitem>
                <listitem><para>
                    <emphasis>开发者视频:</emphasis>
                    <ulink url='http://vimeo.com/36450321'>Yocto项目入门 - 新开发者视频教程</ulink>
                    为不熟悉Yocto项目但熟悉原生Linux构建主机的用户提供一个30分钟的视频。
                    虽然这个视频有点过时，但介绍和基本概念对初学者很有用。
                    </para></listitem>
                <listitem><para>
                    <emphasis>Yocto项目概述和概念手册:</emphasis>
                    <ulink url='&YOCTO_DOCS_OM_URL;'>Yocto项目概述和概念手册</ulink>
                    是一个了解Yocto项目的好文档。
                    该手册向您介绍Yocto项目及其开发环境，还提供了Yocto项目各方面的概念信息。
                    </para></listitem>
                <listitem><para>
                    <emphasis>Yocto项目维基:</emphasis>
                    <ulink url='&YOCTO_WIKI_URL;'>Yocto项目维基</ulink>
                    提供了一些附加信息，包括项目规划，发布信息，和质量保证（QA）信息。
                    </para></listitem>
                <listitem><para>
                    <emphasis>Yocto项目邮件列表:</emphasis>
                    相关邮件列表提供一个论坛用于讨论，补丁提交和公告。 
                    存在多个邮件列表，并根据关注的领域进行分组。
                    Yocto项目邮件列表的完整列表，请参阅“Yocto项目参考手册”的
                    "<ulink url='&YOCTO_DOCS_REF_URL;#resources-mailinglist'>邮件列表</ulink>"
                    部分。
                    </para></listitem>
                <listitem><para>
                    <emphasis>链接和其他文档的完整列表:</emphasis>
                    请参阅“Yocto项目参考手册”的
                    "<ulink url='&YOCTO_DOCS_REF_URL;#resources-links-and-related-documentation'>链接和相关文档</ulink>"
                    部分。
                    </para></listitem>
            </itemizedlist>
        </para>
    </section>
</article>
<!--
vim: expandtab tw=80 ts=4
-->
